I"¢<p>Constants:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>final static String GITHUB_BASE_URL =
        "https://api.github.com/search/repositories";
final static String PARAM_QUERY = "q";
final static String PARAM_SORT = "sort";
final static String sortBy = "stars";
</code></pre></div></div>

<p>To build our search URL,we can take advantage of the <code class="highlighter-rouge">Android URI.builder</code> framework class. It allows us to create a well-formed URI,without having to worry about the particulars of URI components.</p>

<p>For example, adding<code class="highlighter-rouge">&amp;</code>between query parameters and encoding invalid characters with a percent followed by the character code.</p>

<hr />

<p><code class="highlighter-rouge">URL</code> is a specific class of <code class="highlighter-rouge">Uri</code>.Once weâ€™ve created our base URI by parsing the <code class="highlighter-rouge">GITHUB_BASE_URL</code> string we created a <code class="highlighter-rouge">Uri.builder</code> using the buildUpon method.</p>

<p>Then we can call <code class="highlighter-rouge">appendQuery</code> parameter for our search query and sort fields.Finally we call <code class="highlighter-rouge">build</code> to produce the Uri weâ€™ll use to query GITHUB.</p>

<p>However,this produces an <strong>Android Uri</strong> while our method requires a <strong>Java URL</strong>.We can convert our new built Uri to a Java URL by passing it as a string parameter to the Java URL constructor.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public static URL buildUrl(String githubSearchQuery) {
    Uri builtUri = Uri.parse(GITHUB_BASE_URL).buildUpon()
            .appendQueryParameter(PARAM_QUERY,githubSearchQuery)
            .appendQueryParameter(PARAM_SORT,sortBy)
            .build();

    URL url = null;
    try {
        url = new URL(builtUri.toString());
    }catch (MalformedURLException e){
        e.printStackTrace();
    }
    return url;
}
</code></pre></div></div>

<p>Then make a method called <code class="highlighter-rouge">makeGithubSearchQuery</code>. It pulls the githubQuery from the edit text,calls the <code class="highlighter-rouge">buildUrl</code> method we just wrote, and displays the resulting URL in the Url DisplayTextView.</p>

<p>Finally,we call to the <code class="highlighter-rouge">makeGithubSearchQuery</code> method from <code class="highlighter-rouge">onOptionItemSelected</code>.Now when we hit the search button in the action bar,weâ€™ll display the URL that weâ€™re going to query.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>private void makeGithubSeachQuery(){
    String githubQuery = mSearchBoxEditText.getText().toString();
    URL githubSearchUrl = NetworkUtils.buildUrl(githubQuery);
    mUrlDisplayTextView.setText(githubSearchUrl.toString());
}

@Override
public boolean onOptionsItemSelected(MenuItem item) {
    int itemThatWasClickedId = item.getItemId();
    if (itemThatWasClickedId == R.id.action_search) {
        makeGithubSeachQuery();
        return true;
    }
    return super.onOptionsItemSelected(item);
}
</code></pre></div></div>
:ET